//얕은 복사 vs 깊은 복사 요약
//얕은 복사(Shallow Copy) :
//
//	객체의 모든 멤버 변수를 그대로 복사.
//	포인터가 포함된 경우 포인터 주소만 복사.
//	두 객체가 동일한 메모리 주소를 참조하게 됨.
//	단순한 데이터 타입을 다루는 경우에는 문제가 없음.
//	깊은 복사(Deep Copy) :
//
//	객체의 모든 멤버 변수를 복사하고, 포인터가 가리키는 실제 데이터도 새로 할당하여 복사.
//	각 객체가 독립적인 메모리를 가지게 됨.
//	동적 메모리(포인터)를 사용하는 경우에 필요.
//	언제 신경 써야 하나 ?
//	포인터가 있는 경우 : 객체가 동적 메모리를 사용하거나 포인터를 멤버로 가질 때 깊은 복사를 구현해야 합니다.
//	간단한 객체 : 단순한 데이터 타입(int, float 등)만 있는 객체는 얕은 복사로 충분합니다.
//	왜 중요할까 ?
//	안정성 : 얕은 복사는 메모리 공유로 인해 한 객체의 변경이 다른 객체에 영향을 줄 수 있습니다.
//	메모리 관리 : 깊은 복사를 통해 각각의 객체가 독립적인 메모리를 가짐으로써 메모리 해제와 관련된 문제를 방지합니다.